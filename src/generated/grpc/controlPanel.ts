/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: controlPanel.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class GPUServerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        operation?: GPUServerRequest.Operation;
        server_config?: GPUServerRequest.ServerConfig;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("operation" in data && data.operation != undefined) {
                this.operation = data.operation;
            }
            if ("server_config" in data && data.server_config != undefined) {
                this.server_config = data.server_config;
            }
        }
    }
    get operation() {
        return pb_1.Message.getFieldWithDefault(this, 1, GPUServerRequest.Operation.UNSPECIFIED) as GPUServerRequest.Operation;
    }
    set operation(value: GPUServerRequest.Operation) {
        pb_1.Message.setField(this, 1, value);
    }
    get server_config() {
        return pb_1.Message.getWrapperField(this, GPUServerRequest.ServerConfig, 2) as GPUServerRequest.ServerConfig;
    }
    set server_config(value: GPUServerRequest.ServerConfig) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_server_config() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        operation?: GPUServerRequest.Operation;
        server_config?: ReturnType<typeof GPUServerRequest.ServerConfig.prototype.toObject>;
    }): GPUServerRequest {
        const message = new GPUServerRequest({});
        if (data.operation != null) {
            message.operation = data.operation;
        }
        if (data.server_config != null) {
            message.server_config = GPUServerRequest.ServerConfig.fromObject(data.server_config);
        }
        return message;
    }
    toObject() {
        const data: {
            operation?: GPUServerRequest.Operation;
            server_config?: ReturnType<typeof GPUServerRequest.ServerConfig.prototype.toObject>;
        } = {};
        if (this.operation != null) {
            data.operation = this.operation;
        }
        if (this.server_config != null) {
            data.server_config = this.server_config.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.operation != GPUServerRequest.Operation.UNSPECIFIED)
            writer.writeEnum(1, this.operation);
        if (this.has_server_config)
            writer.writeMessage(2, this.server_config, () => this.server_config.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GPUServerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GPUServerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.operation = reader.readEnum();
                    break;
                case 2:
                    reader.readMessage(message.server_config, () => message.server_config = GPUServerRequest.ServerConfig.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GPUServerRequest {
        return GPUServerRequest.deserialize(bytes);
    }
}
export namespace GPUServerRequest {
    export enum Operation {
        UNSPECIFIED = 0,
        ADD = 1,
        REMOVE = 2
    }
    export class ServerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            port?: number;
            isHighPriority?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("isHighPriority" in data && data.isHighPriority != undefined) {
                    this.isHighPriority = data.isHighPriority;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get isHighPriority() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set isHighPriority(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            address?: string;
            port?: number;
            isHighPriority?: boolean;
        }): ServerConfig {
            const message = new ServerConfig({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.isHighPriority != null) {
                message.isHighPriority = data.isHighPriority;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                port?: number;
                isHighPriority?: boolean;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.isHighPriority != null) {
                data.isHighPriority = this.isHighPriority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.port != 0)
                writer.writeInt32(2, this.port);
            if (this.isHighPriority != false)
                writer.writeBool(3, this.isHighPriority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.port = reader.readInt32();
                        break;
                    case 3:
                        message.isHighPriority = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerConfig {
            return ServerConfig.deserialize(bytes);
        }
    }
}
export class GPUServerResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): GPUServerResponse {
        const message = new GPUServerResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GPUServerResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GPUServerResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GPUServerResponse {
        return GPUServerResponse.deserialize(bytes);
    }
}
export class ThrottlingRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        limit_config?: Map<string, number>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("limit_config" in data && data.limit_config != undefined) {
                this.limit_config = data.limit_config;
            }
        }
        if (!this.limit_config)
            this.limit_config = new Map();
    }
    get limit_config() {
        return pb_1.Message.getField(this, 1) as any as Map<string, number>;
    }
    set limit_config(value: Map<string, number>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
        limit_config?: {
            [key: string]: number;
        };
    }): ThrottlingRequest {
        const message = new ThrottlingRequest({});
        if (typeof data.limit_config == "object") {
            message.limit_config = new Map(Object.entries(data.limit_config));
        }
        return message;
    }
    toObject() {
        const data: {
            limit_config?: {
                [key: string]: number;
            };
        } = {};
        if (this.limit_config != null) {
            data.limit_config = (Object.fromEntries)(this.limit_config);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.limit_config) {
            writer.writeMessage(1, this.limit_config, () => {
                writer.writeString(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ThrottlingRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ThrottlingRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.limit_config as any, reader, reader.readString, reader.readInt32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ThrottlingRequest {
        return ThrottlingRequest.deserialize(bytes);
    }
}
export class ThrottlingResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): ThrottlingResponse {
        const message = new ThrottlingResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ThrottlingResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ThrottlingResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ThrottlingResponse {
        return ThrottlingResponse.deserialize(bytes);
    }
}
export class UpdatePemRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): UpdatePemRequest {
        const message = new UpdatePemRequest({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePemRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePemRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdatePemRequest {
        return UpdatePemRequest.deserialize(bytes);
    }
}
export class UpdatePemResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): UpdatePemResponse {
        const message = new UpdatePemResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePemResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePemResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdatePemResponse {
        return UpdatePemResponse.deserialize(bytes);
    }
}
export class UpdateModelListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        files?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("files" in data && data.files != undefined) {
                this.files = data.files;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get files() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set files(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        message?: string;
        files?: string[];
    }): UpdateModelListRequest {
        const message = new UpdateModelListRequest({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.files != null) {
            message.files = data.files;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            files?: string[];
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.files != null) {
            data.files = this.files;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.files.length)
            writer.writeRepeatedString(2, this.files);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateModelListRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateModelListRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateModelListRequest {
        return UpdateModelListRequest.deserialize(bytes);
    }
}
export class UpdateModelListResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): UpdateModelListResponse {
        const message = new UpdateModelListResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateModelListResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateModelListResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateModelListResponse {
        return UpdateModelListResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedControlPanelServiceService {
    static definition = {
        ManageGPUServer: {
            path: "/ControlPanelService/ManageGPUServer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GPUServerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GPUServerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GPUServerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GPUServerResponse.deserialize(new Uint8Array(bytes))
        },
        UpdateThrottlingConfig: {
            path: "/ControlPanelService/UpdateThrottlingConfig",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ThrottlingRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ThrottlingRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ThrottlingResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ThrottlingResponse.deserialize(new Uint8Array(bytes))
        },
        UpdatePem: {
            path: "/ControlPanelService/UpdatePem",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdatePemRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdatePemRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UpdatePemResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UpdatePemResponse.deserialize(new Uint8Array(bytes))
        },
        UpdateModelList: {
            path: "/ControlPanelService/UpdateModelList",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateModelListRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateModelListRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UpdateModelListResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UpdateModelListResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract ManageGPUServer(call: grpc_1.ServerUnaryCall<GPUServerRequest, GPUServerResponse>, callback: grpc_1.sendUnaryData<GPUServerResponse>): void;
    abstract UpdateThrottlingConfig(call: grpc_1.ServerUnaryCall<ThrottlingRequest, ThrottlingResponse>, callback: grpc_1.sendUnaryData<ThrottlingResponse>): void;
    abstract UpdatePem(call: grpc_1.ServerUnaryCall<UpdatePemRequest, UpdatePemResponse>, callback: grpc_1.sendUnaryData<UpdatePemResponse>): void;
    abstract UpdateModelList(call: grpc_1.ServerUnaryCall<UpdateModelListRequest, UpdateModelListResponse>, callback: grpc_1.sendUnaryData<UpdateModelListResponse>): void;
}
export class ControlPanelServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedControlPanelServiceService.definition, "ControlPanelService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    ManageGPUServer: GrpcUnaryServiceInterface<GPUServerRequest, GPUServerResponse> = (message: GPUServerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GPUServerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GPUServerResponse>, callback?: grpc_1.requestCallback<GPUServerResponse>): grpc_1.ClientUnaryCall => {
        return super.ManageGPUServer(message, metadata, options, callback);
    };
    UpdateThrottlingConfig: GrpcUnaryServiceInterface<ThrottlingRequest, ThrottlingResponse> = (message: ThrottlingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ThrottlingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ThrottlingResponse>, callback?: grpc_1.requestCallback<ThrottlingResponse>): grpc_1.ClientUnaryCall => {
        return super.UpdateThrottlingConfig(message, metadata, options, callback);
    };
    UpdatePem: GrpcUnaryServiceInterface<UpdatePemRequest, UpdatePemResponse> = (message: UpdatePemRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdatePemResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdatePemResponse>, callback?: grpc_1.requestCallback<UpdatePemResponse>): grpc_1.ClientUnaryCall => {
        return super.UpdatePem(message, metadata, options, callback);
    };
    UpdateModelList: GrpcUnaryServiceInterface<UpdateModelListRequest, UpdateModelListResponse> = (message: UpdateModelListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateModelListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateModelListResponse>, callback?: grpc_1.requestCallback<UpdateModelListResponse>): grpc_1.ClientUnaryCall => {
        return super.UpdateModelList(message, metadata, options, callback);
    };
}
