// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class LoRA implements flatbuffers.IUnpackableObject<LoRAT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LoRA {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLoRA(bb:flatbuffers.ByteBuffer, obj?:LoRA):LoRA {
  return (obj || new LoRA()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLoRA(bb:flatbuffers.ByteBuffer, obj?:LoRA):LoRA {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LoRA()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

file():string|null
file(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
file(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

weight():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.6;
}

static startLoRA(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFile(builder:flatbuffers.Builder, fileOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, fileOffset, 0);
}

static addWeight(builder:flatbuffers.Builder, weight:number) {
  builder.addFieldFloat32(1, weight, 0.6);
}

static endLoRA(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLoRA(builder:flatbuffers.Builder, fileOffset:flatbuffers.Offset, weight:number):flatbuffers.Offset {
  LoRA.startLoRA(builder);
  LoRA.addFile(builder, fileOffset);
  LoRA.addWeight(builder, weight);
  return LoRA.endLoRA(builder);
}

unpack(): LoRAT {
  return new LoRAT(
    this.file(),
    this.weight()
  );
}


unpackTo(_o: LoRAT): void {
  _o.file = this.file();
  _o.weight = this.weight();
}
}

export class LoRAT implements flatbuffers.IGeneratedObject {
constructor(
  public file: string|Uint8Array|null = null,
  public weight: number = 0.6
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const file = (this.file !== null ? builder.createString(this.file!) : 0);

  return LoRA.createLoRA(builder,
    file,
    this.weight
  );
}
}
